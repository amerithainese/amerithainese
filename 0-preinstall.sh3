#!/usr/bin/env bash
#-------------------------------------------------------------------------
#   █████╗ ██████╗  ██████╗██╗  ██╗████████╗██╗████████╗██╗   ██╗███████╗
#  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚══██╔══╝██║╚══██╔══╝██║   ██║██╔════╝
#  ███████║██████╔╝██║     ███████║   ██║   ██║   ██║   ██║███████╗
#  ██╔══██║██╔══██╗██║     ██╔══██║   ██║   ██║   ██║   ██║╚════██║
#  ██║  ██║██║  ██║╚██████╗██║  ██║   ╚██████╔╝   ██║   ██║███████║
#  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝    ╚═════╝    ╚═╝   ╚═╝╚══════╝
#-------------------------------------------------------------------------
# github-action genshdoc
# @file Preinstall
# @brief Configure system and pacstrap install to selected drive

set -euo pipefail

echo -ne "
-------------------------------------------------------------------------
                    Automated Arch Linux Installer
-------------------------------------------------------------------------
"

source $CONFIGS_DIR/setup.conf

#-------------------------------
# Setup timezone, mirrors, keyrings
#-------------------------------
iso=$(curl -4 ifconfig.co/country-iso)
timedatectl set-ntp true

pacman -S --noconfirm archlinux-keyring pacman-contrib terminus-font
setfont ter-v22b

# Enable parallel downloads
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf

# Install utilities
pacman -S --noconfirm --needed reflector rsync grub gptfdisk btrfs-progs glibc

# Backup mirrorlist
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup

echo -ne "
-------------------------------------------------------------------------
                    Setting up $iso mirrors
-------------------------------------------------------------------------
"
reflector -a 48 -c $iso -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist

mkdir -p /mnt

#-------------------------------
# Disk preparation
#-------------------------------
umount -A --recursive /mnt
sgdisk -Z ${DISK}                     # Wipe disk
sgdisk -a 2048 -o ${DISK}            # New GPT

# Partitions
sgdisk -n 1::+1M --typecode=1:ef02 --change-name=1:'BIOSBOOT' ${DISK}
sgdisk -n 2::+5000M --typecode=2:ef00 --change-name=2:'EFIBOOT' ${DISK}
sgdisk -n 3::-0 --typecode=3:8300 --change-name=3:'ROOT' ${DISK}

# BIOS check
if [[ ! -d "/sys/firmware/efi" ]]; then
    sgdisk -A 1:set:2 ${DISK}
fi
partprobe ${DISK}

# Partition names
if [[ "${DISK}" =~ "nvme" ]]; then
    partition2=${DISK}p2
    partition3=${DISK}p3
else
    partition2=${DISK}2
    partition3=${DISK}3
fi

MOUNT_OPTIONS="noatime,compress=zstd,space_cache=v2"

#-------------------------------
# BTRFS Subvolume functions
#-------------------------------
createsubvolumes() {
    btrfs subvolume create /mnt/@home
    btrfs subvolume create /mnt/@root
    btrfs subvolume create /mnt/@srv
    btrfs subvolume create /mnt/@.snapshots
    btrfs subvolume create /mnt/@var_log
    btrfs subvolume create /mnt/@var_pkgs
}

mountallsubvol() {
    mount -o ${MOUNT_OPTIONS},subvol=@.snapshots ${partition3} /mnt/.snapshots
    mount -o ${MOUNT_OPTIONS},subvol=@home ${partition3} /mnt/home
    mount -o ${MOUNT_OPTIONS},subvol=@root ${partition3} /mnt/root
    mount -o ${MOUNT_OPTIONS},subvol=@srv ${partition3} /mnt/srv
    mount -o ${MOUNT_OPTIONS},subvol=@var_log ${partition3} /mnt/var/log
    mount -o ${MOUNT_OPTIONS},subvol=@var_pkgs ${partition3} /mnt/var/cache/pacman/pkg
}

subvolumesetup() {
    createsubvolumes
    umount /mnt || true
    mount -o ${MOUNT_OPTIONS},subvolid=5 ${partition3} /mnt
    mkdir -p /mnt/{home,root,srv,.snapshots,var/log,var/cache/pacman/pkg}
    mountallsubvol
}

#-------------------------------
# Format and mount filesystems
#-------------------------------
if [[ "${FS}" == "btrfs" ]]; then
    mkfs.vfat -F32 -n "EFIBOOT" ${partition2}
    mkfs.btrfs -L ROOT ${partition3} -f
    mount -t btrfs ${partition3} /mnt
    subvolumesetup
elif [[ "${FS}" == "ext4" ]]; then
    mkfs.vfat -F32 -n "EFIBOOT" ${partition2}
    mkfs.ext4 -L ROOT ${partition3}
    mount -t ext4 ${partition3} /mnt
elif [[ "${FS}" == "luks" ]]; then
    mkfs.vfat -F32 -n "EFIBOOT" ${partition2}
    echo -n "${LUKS_PASSWORD}" | cryptsetup -y -v luksFormat ${partition3} -
    echo -n "${LUKS_PASSWORD}" | cryptsetup open ${partition3} ROOT -
    mkfs.btrfs -L ROOT /dev/mapper/ROOT
    mount -t btrfs /dev/mapper/ROOT /mnt
    subvolumesetup
    echo ENCRYPTED_PARTITION_UUID=$(blkid -s UUID -o value ${partition3}) >> $CONFIGS_DIR/setup.conf
fi

# Mount EFI
mkdir -p /mnt/boot/efi
mount -t vfat -L EFIBOOT /mnt/boot/

#-------------------------------
# Pacstrap base system
#-------------------------------
if ! grep -qs '/mnt' /proc/mounts; then
    echo "Drive is not mounted. Rebooting..." && sleep 3 && reboot now
fi

pacstrap /mnt base base-devel linux linux-firmware vim nano sudo archlinux-keyring wget libnewt --noconfirm --needed
echo "keyserver hkp://keyserver.ubuntu.com" >> /mnt/etc/pacman.d/gnupg/gpg.conf

# Copy installer scripts
cp -R ${SCRIPT_DIR} /mnt/root/ArchTitus
cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

# Generate fstab
genfstab -L /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab

#-------------------------------
# GRUB installation
#-------------------------------
if [[ ! -d "/sys/firmware/efi" ]]; then
    grub-install --boot-directory=/mnt/boot ${DISK}
else
    pacstrap /mnt efibootmgr --noconfirm --needed
fi

#-------------------------------
# Low-memory swap setup
#-------------------------------
TOTAL_MEM=$(grep -i 'memtotal' /proc/meminfo | grep -o '[[:digit:]]*')
if [[ $TOTAL_MEM -lt 16000000 ]]; then
    mkdir -p /mnt/opt/swap
    chattr +C /mnt/opt/swap
    dd if=/dev/zero of=/mnt/opt/swap/swapfile bs=1M count=8048 status=progress
    chmod 600 /mnt/opt/swap/swapfile
    chown root /mnt/opt/swap/swapfile
    mkswap /mnt/opt/swap/swapfile
    swapon /mnt/opt/swap/swapfile
    echo "/opt/swap/swapfile none swap sw 0 0" >> /mnt/etc/fstab
fi

#-------------------------------
# Post-install Snapper & snap-pac setup
#-------------------------------
arch-chroot /mnt /bin/bash <<'EOF'
pacman -S --noconfirm snapper snap-pac

# Create Snapper configs
snapper -c root create-config /
snapper -c home create-config /home || true

# Fix permissions for snapshots
chown -R root:root /.snapshots
chmod 750 /.snapshots

# Enable timers
systemctl enable --now snapper-timeline.timer
systemctl enable --now snapper-cleanup.timer

# Enable automatic snapshots for pacman transactions
snap-pac enable
EOF

echo -ne "
-------------------------------------------------------------------------
                    SYSTEM READY FOR 1-setup.sh
-------------------------------------------------------------------------
"
